import unittest
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_testing import TestCase
from backend import app, db, User, Group, Chat, WalletAccount, ChatMessage, email_otps, generate_otp, verify_otp
import os

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestAPI(TestCase):
    SQLALCHEMY_DATABASE_URI = "sqlite:///app.db"
    TESTING = True

    def create_app(self):
        app.config['SQLALCHEMY_DATABASE_URI'] = self.SQLALCHEMY_DATABASE_URI
        app.config['TESTING'] = self.TESTING
        app.config['UPLOAD_FOLDER'] = 'test_uploads'
        return app

    def setUp(self):
        db.create_all() 
        self.client = app.test_client()
        if not os.path.exists(app.config['UPLOAD_FOLDER']):
            os.makedirs(app.config['UPLOAD_FOLDER'])
        logger.info("Setup complete, database created")

    def tearDown(self):
        print(f"\n\ncalling a soft tearDown")
        logger.info("\nTeardown complete, database dropped")

    def log_table_records(self, model):
        records = model.query.all()
        if records:
            logger.info(f"\nTable: {model.__tablename__}\n")
            for record in records:
                record_dict = record.to_dict()
                logger.info("\n\n")
                logger.info(", ".join(f"{key}: {value}" for key, value in record_dict.items()))
        else:
            logger.info(f"\nNo records found in table: {model.__tablename__}\n")

    def test_create_2_users(self):
        # Create two users by fetching name from the images [aku.jpeg, samurai.jpeg] in test_media folder
        # generate username and email from the extracted name, then proceed to generate the otp

        # fetching images in directory
        images = os.listdir('test_media')
        logger.info(f"\nImages found in directory: {images}\n")
        
        # filter to find aku.jpeg and samurai.jpeg
        aku_image = 'aku.jpeg' if 'aku.jpeg' in images else None
        samurai_image = 'samurai.jpeg' if 'samurai.jpeg' in images else None

        # Check if the images exist
        if not aku_image or not samurai_image:
            logger.error("Required images not found in the directory")
            self.fail("Required images not found in the directory")
        
        # extract name
        aku_name = aku_image.split('.')[0]
        samurai_name = samurai_image.split('.')[0]
        logger.info(f"Extracted names: {aku_name}, {samurai_name}")
        
        # generate username and email
        aku_username = aku_name.lower()
        samurai_username = samurai_name.lower()
        aku_email = f"{aku_name.replace(' ', '.').lower()}@gmail.com"
        samurai_email = f"{samurai_name.replace(' ', '.').lower()}@gmail.com"
        logger.info(f"Generated username and email: {aku_username}, {aku_email}, {samurai_username}, {samurai_email}")
        
        # generate otp
        aku_otp = generate_otp(aku_email)
        samurai_otp = generate_otp(samurai_email)
        logger.info(f"Generated otp: {aku_otp}, {samurai_otp}")
        
        # verify otp
        aku_verified = verify_otp(aku_email, aku_otp)
        samurai_verified = verify_otp(samurai_email, samurai_otp)
        logger.info(f"Verified otp: {aku_verified}, {samurai_verified}")
        
        # create users via API
        aku_response = self.client.post('/api/user', json={
            'username': aku_username,
            'email': aku_email,
            'otp_secret': aku_otp
        })
        samurai_response = self.client.post('/api/user', json={
            'username': samurai_username,
            'email': samurai_email,
            'otp_secret': samurai_otp
        })
        
        self.assertEqual(aku_response.status_code, 201)
        self.assertEqual(samurai_response.status_code, 201)
        
        logger.info(f"Aku user creation response: {aku_response.get_json()}")
        logger.info(f"Samurai user creation response: {samurai_response.get_json()}")
        
        self.log_table_records(email_otps)
        self.log_table_records(User)

    def test_create_group_and_conversation(self):
        # Create two users
        self.test_create_2_users()

        # Create two single chats
        chat1_response = self.client.post('/api/chat/single', json={
            'user_id': 2
        })
        chat2_response = self.client.post('/api/chat/single', json={
            'user_id': 3
        })

        self.assertEqual(chat1_response.status_code, 200)
        self.assertEqual(chat2_response.status_code, 200)

        chat1_id = chat1_response.get_json()['chat_id']
        chat2_id = chat2_response.get_json()['chat_id']

        # Generate short conversation for [1,2] about power puff girls
        for i in range(5):
            self.client.post('/api/chat/single/message', data={
                'user_id': 1,
                'chat_id': chat1_id,
                'content': f"Power Puff Girls message {i+1} from user 1"
            })
            self.client.post('/api/chat/single/message', data={
                'user_id': 2,
                'chat_id': chat1_id,
                'content': f"Power Puff Girls message {i+1} from user 2"
            })

        # Generate short conversation for [1,3] about johny bravo
        for i in range(5):
            self.client.post('/api/chat/single/message', data={
                'user_id': 1,
                'chat_id': chat2_id,
                'content': f"Johny Bravo message {i+1} from user 1"
            })
            self.client.post('/api/chat/single/message', data={
                'user_id': 3,
                'chat_id': chat2_id,
                'content': f"Johny Bravo message {i+1} from user 3"
            })

        # Create a group called CN-FanBase
        group_response = self.client.post('/api/group', json={
            'name': 'CN-FanBase'
        })
        self.assertEqual(group_response.status_code, 200)
        group_id = group_response.get_json()['group_id']

        # Add 8 new users from the pool, with media included
        for i in range(4, 12):
            user_response = self.client.post('/api/user', json={
                'username': f'user{i}',
                'email': f'user{i}@gmail.com',
                'otp_secret': generate_otp(f'user{i}@gmail.com')
            })
            self.assertEqual(user_response.status_code, 201)
            self.client.post('/api/group/member', json={
                'group_id': group_id,
                'user_id': i
            })

        # Create mock conversation from the 8 users
        for i in range(4, 12):
            for j in range(2):
                self.client.post('/api/chat/group/message', data={
                    'user_id': i,
                    'chat_id': group_id,
                    'content': f"Group message {j+1} from user {i}"
                })

        # Add user id 1 to that group
        self.client.post('/api/group/member', json={
            'group_id': group_id,
            'user_id': 1
        })

        self.log_table_records(User)
        self.log_table_records(Group)
        self.log_table_records(Chat)
        self.log_table_records(ChatMessage)

if __name__ == '__main__':
    unittest.main()